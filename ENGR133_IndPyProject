#imports modules necessary for webscraping
from bs4 import BeautifulSoup
import requests
import re

#takes the stock sybmol as a user input then sends an html request to the site
#based on the given stock symbol
#userstock = input("Enter the desired stock symbol: ")
userstock = "t"

#error checks user stock input to make sure it's compatible
if type(userstock) != str:
    print("Error, please enter the stock symbol as a string.")
else:
    pass

#imports site html data from stock options' webpage
userurl = f"https://finance.yahoo.com/quote/{userstock}/options?p={userstock}"
r = requests.get(userurl) 
soup = BeautifulSoup(r.content, 'html5lib')

#imports possible option dates data for the stock
optionList = soup.find("select", {"class": \
                                      "Fz(s) H(25px) Bd Bdc($seperatorColor)"})

#defines a function importDates() that parses the stock option dates data for 
#both the string version of the date for the user to see as well as the timestamp 
#for the program, then populates and returns the two lists
def importDates(optionList):
    #sets up two empty lists to store dates and their milliseconds time stamps
    possibleDates = []
    dateTimestamp = []
    #creates a for loop that populates the empty lists with possible option 
    #dates data
    for row in optionList:
        possibleDates.append(row.string)
        dateTimestamp.append(row.attrs['value'])
    return possibleDates, dateTimestamp
#calls the importDates functions and accesses the two populated lists
possibleDates, dateTimestamp = importDates(optionList)

#defines a function that outputs the possible dates for the user to choose from
def showPossibleDates(possibleDates):
        print("Available option expiry dates are:")
        #initializes the counting variable
        count = 0  
        #runs a for loop that outputs the dates, formatted properly
        for dates in possibleDates:
            count = count + 1
            print('For ' + dates + ' enter:', count)
        return
#calls the showPossibleDates function and displays possible dates
showPossibleDates(possibleDates)
#prompts the user to select a date, input stored as userDateOption
#userDateOption = input("Select an option expiry date: ")
userDateOption = "15"

#redefines timestamp associated with selected expiry date as counting variable
#starts at 1
optionDate = dateTimestamp[int(userDateOption) - 1]

#imports site html data from stock options' webpage
optionsUrl = f"https://finance.yahoo.com/quote/{userstock}/options?date={optionDate}"
r = requests.get(optionsUrl) 
soup = BeautifulSoup(r.content, 'html5lib')
#imports call data for chosen stock option
callsTable = soup.find_all("table", {"class": "calls W(100%) Pos(r) Bd(0) Pt(0) list-options"})

#sets up necessary empty lists for organizing the imported data
optionName = []
optionTradeTime = []
optionStrikePrice = []
optionAskPrice = []
optionVolatility = []
sharePrice = 29.64
#imports each contract's details like the ask price and %change and assigns 
#them to the appropriate empty list
for row in callsTable:
    allOptionsData = row.find("tbody")
    for tr in allOptionsData:
        allTrData = tr.find_all("td")
        for td in tr.find("td"):
            optionName.append(td.string)
        for td in tr.find("td", {"class": "data-col1 Ta(end) Pstart(7px)"}):
            optionTradeTime.append(td.string)
        for a in tr.find("a", {"class": "C($linkColor) Fz(s)"}):
            optionStrikePrice.append(float(a))
        for td in tr.find("td", {"class": "data-col5 Ta(end) Pstart(7px)"}):
            optionAskPrice.append(float(td))
        for td in tr.find_all("td", {"class": "data-col10 Ta(end) Pstart(7px) Pend(6px) Bdstartc(t)"}):
            percent = td.string
            percent = percent.replace("%", " ")
            optionVolatility.append(float(percent))

print(optionVolatility)

#allows user choice of criteria for which to determine best options
print("\nPlease choose your desired portfolio:")
print("For options with the highest intrinsic value, enter 'int'.")
print("For options with the lowest volatility, enter 'vol'.")
print("For options with the greatest upward trend (%change).")
orgChoice = input("Organization method: ")
#orgChoice = 'int'

optValues = []
bestOptValueIndex = []
if orgChoice == 'int':
    count = 1
    for i in optionStrikePrice:
        optValues.append(round(sharePrice - i, 2))
    while count <= 3:
        index = optValues.index(max(optValues))
        bestOptValueIndex.append(index)
        optValues[index] = 0
        count += 1
elif orgChoice == 'vol':
    continue
else:
    print("Error, please rerun program and choose from given options.")
